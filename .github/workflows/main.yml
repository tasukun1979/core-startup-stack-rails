# This is a basic workflow to help you get started with Actions

name: Build and Deploy

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - main
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"

  config:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.setName.outputs.name }}
      deployTag: ${{ steps.setTag.outputs.deployTag }}
      crName: ${{ steps.setCRName.outputs.crName}}
      spId: ${{ steps.setSpId.outputs.spId}}
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - uses: actions/checkout@v2
    - name: 'Set Name'
      id: setName
      run: |
        NAME=$(jq -r '.["parameters"]["name"]["value"]' infrastructure/params-production.json)
        echo "::set-output name=name::${NAME//'%'/'%25'}"
    - name: 'Set Container Registry Name'
      id: setCRName
      run: |
        CR_NAME=$(az acr list -g ${{ secrets.AZURE_RG }} --query [0].name -o tsv)
        echo "::set-output name=crName::${CR_NAME//'-'/''}"

    - name: 'Set Deploy Tag Name'
      id: setTag
      run: |
        DEPLOY_TAG=$(git describe --tags --always HEAD)
        echo "::set-output name=deployTag::${DEPLOY_TAG}"

    - name: 'Set Service Principal ID'
      id: setSpId
      run: |
        SP_ID=$(az ad sp show --id ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }} --query id -o tsv)
        echo "::set-output name=spId::${SP_ID}"

    - name: 'Mask Service Principal Key'
      run: |
        echo "::add-mask::${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}"


  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [ config ]

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      
    - name: 'Mask Service Principal Key'
      run: |
        echo "::add-mask::${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}"
      
    - uses: azure/docker-login@v1
      name: 'Login to Azure Container Registry'
      with:
        login-server: ${{ needs.config.outputs.crName }}.azurecr.io
        username: ${{fromJSON(secrets.AZURE_CREDENTIALS).clientId}}
        password: ${{fromJSON(secrets.AZURE_CREDENTIALS).clientSecret}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1.5.1
      with:
        use: true

    - name: Build and Push App
      id: docker_build
      uses: docker/build-push-action@v2.6.1
      with:
        push: true
        target: app
        build-args: commit=${{ needs.config.outputs.deployTag }}
        tags: ${{ needs.config.outputs.crName }}.azurecr.io/${{ needs.config.outputs.name }}:${{ needs.config.outputs.deployTag }}
        cache-from: type=registry,ref=${{ needs.config.outputs.crName }}.azurecr.io/${{ needs.config.outputs.name }}:buildcache
        cache-to: type=registry,ref=${{ needs.config.outputs.crName }}.azurecr.io/${{ needs.config.outputs.name }}:buildcache,mode=max
    
    - name: Export assets
      id: export_assets
      uses: docker/build-push-action@v2.6.1
      with:
        push: false
        target: static
        cache-from: type=registry,ref=${{ needs.config.outputs.crName }}.azurecr.io/${{ needs.config.outputs.name }}:buildcache
        outputs: type=local,dest=static
    
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
  
    - name: Store Assets
      env:
        AZCOPY_SPA_CLIENT_SECRET: ${{fromJSON(secrets.AZURE_CREDENTIALS).clientSecret}}
      run: |
        azcopy login --service-principal --tenant-id ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId}} --application-id ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId}}
        ASSETS_URL="$(az storage account list -g ${{ secrets.AZURE_RG }} --query [0].primaryEndpoints.blob -o tsv)assets"
        echo $ASSETS_URL
        azcopy copy --recursive "static/*" $ASSETS_URL
        azcopy logout

  deploy:
    runs-on: ubuntu-latest
    needs:
    - build
    - config
    
    steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: actions/checkout@v2

      - name: 'Deploy Infrastructure'
        uses: azure/arm-deploy@v1
        id: deployInfra
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: infrastructure/startup-stack.bicep
          parameters: "infrastructure/params-production.json dbPassword=\"${{ secrets.DB_PASSWORD }}\" deployedTag=${{ needs.config.outputs.deployTag }} deploymentSpId=${{ needs.config.outputs.spId }}"
      
      - name: Success!
        run: |
          echo -e "
          \e[1;32mSuccessfully deployed using the Startup Stack. \e[0m
          \e[1mWebapp name:\e[0m ${{ steps.deployInfra.outputs.webappName }} 
          \e[1mURL:\e[0m ${{ steps.deployInfra.outputs.url }}
          \e[1;32mConnect to the app via ssh using this command:\e[0m
          az webapp ssh -n ${{ steps.deployInfra.outputs.webappName }} -g <RESOURCE GROUP NAME>
          "
                
